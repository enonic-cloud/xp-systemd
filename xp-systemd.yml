---
- hosts: "all"
  become: true

  vars:
    XP_VERSION: 7.7.1
    XP_USER: xp
    XP_GROUP: xp
    XP_DIR_DISTROS: /opt/enonic/distros
    XP_DIR_HOME: /opt/enonic/home
    XP_SERVICE_NAME: xp.service
    XP_SERVICE_FILE: "/etc/systemd/system/{{ XP_SERVICE_NAME }}"
    XP_OPTS: "-Xms1G -Xmx1G"

  tasks:
    - name: Set vm.max_map_count
      sysctl:
        name: vm.max_map_count
        value: "262144"
        sysctl_set: true

    - name: Ensure group exists
      ansible.builtin.group:
        name: "{{ XP_GROUP }}"
    
    - name: Ensure user exists
      ansible.builtin.user:
        name: "{{ XP_USER }}"
        group: "{{ XP_GROUP }}"
        system: true

    - name: Check if distro directory exists
      ansible.builtin.stat:
        path: "{{ XP_DIR_HOME }}"
      register: distro_details

    - name: Ensure distro directory exists
      when: not distro_details.stat.exists
      ansible.builtin.file:
        path: "{{ XP_DIR_DISTROS }}"
        state: directory
        recurse: true
        owner: "{{ XP_USER }}"
        group: "{{ XP_GROUP }}"
        mode: 0775

    - name: Check if distro exists
      ansible.builtin.stat:
        path: "{{ XP_DIR_DISTROS }}/enonic-xp-linux-server-{{ XP_VERSION }}"
      register: distro_details

    - name: Download distro
      when: not distro_details.stat.exists
      ansible.builtin.unarchive:
        src: "https://repo.enonic.com/public/com/enonic/xp/enonic-xp-linux-server/{{ XP_VERSION }}/enonic-xp-linux-server-{{ XP_VERSION }}.tgz"
        dest: "{{ XP_DIR_DISTROS }}"
        owner: "{{ XP_USER }}"
        group: "{{ XP_GROUP }}"
        remote_src: true

    - name: Check if home directory exists
      ansible.builtin.stat:
        path: "{{ XP_DIR_HOME }}"
      register: home_details

    - name: Copy home directory from distro
      when: not home_details.stat.exists
      ansible.posix.synchronize:
        src: "{{ XP_DIR_DISTROS }}/enonic-xp-linux-server-{{ XP_VERSION }}/home/"
        dest: "{{ XP_DIR_HOME }}"
      delegate_to: "{{ inventory_hostname }}"

    - name: Create systemd service
      ansible.builtin.copy:
        dest: "{{ XP_SERVICE_FILE }}"
        content: |
          [Unit]
          Description=Enonic XP
          Documentation=https://developer.enonic.com/docs
          Wants=network-online.target
          After=network-online.target

          [Service]
          Type=simple
          PrivateTmp=true
          Environment=XP_INSTALL={{ XP_DIR_DISTROS }}/enonic-xp-linux-server-{{ XP_VERSION }}
          Environment=XP_JAVA_HOME={{ XP_DIR_DISTROS }}/enonic-xp-linux-server-{{ XP_VERSION }}/jdk
          Environment=XP_HOME={{ XP_DIR_HOME }}
          Environment=XP_OPTS={{ XP_OPTS }}

          User={{ XP_USER }}
          Group={{ XP_GROUP }}

          ExecStart={{ XP_DIR_DISTROS }}/enonic-xp-linux-server-{{ XP_VERSION }}/bin/server.sh

          StandardOutput=journal
          StandardError=inherit

          LimitNOFILE=65536
          LimitNPROC=4096
          LimitAS=infinity
          LimitFSIZE=infinity

          KillSignal=SIGTERM
          KillMode=process
          SendSIGKILL=no
          SuccessExitStatus=143

          [Install]
          WantedBy=multi-user.target
      register: systemd_service_definition

    - name: Enable and start systemd service
      when: systemd_service_definition.changed
      ansible.builtin.systemd:
        name: "{{ XP_SERVICE_NAME }}"
        state: started
        enabled: yes
        daemon_reload: yes
      register: systemd_service_enabled

    - name: Restart systemd service
      when: systemd_service_definition.changed and not systemd_service_enabled.changed
      ansible.builtin.systemd:
        name: "{{ XP_SERVICE_NAME }}"
        state: restarted
        daemon_reload: yes
